# module load singularity

# If there is more than 1 reference, please prepare the samples_ref.txt file before running this lablog.

# Setting samples_ref.txt file
read -p "Is samples_ref.txt file already prepared? [y/n]: " samples_ref_prepared
if [ "$samples_ref_prepared" == "y" ]; then 
    echo "File samples_ref.txt READY."
else
    echo "File samples_ref NOT prepared."
    while [ -z "$host" ] || [ -z "$reference" ] || [ "$answer" != "y" ]; do
        read -p "Please specify the host: " host
        read -p "Please specify the reference: " reference
        read -p "Are host [$host] and reference [$reference] correct? (y/n): " answer
    done
    python3 samples_ref_viralrecon.py $reference $host
    echo "File samples_ref.txt READY."
fi

# Preparing the environment for SARS-CoV-2 analysis
test_ref=$(cut -f2 samples_ref.txt | head -n1)
if [ "$test_ref" == "NC_045512.2" ]; then

    # Extracting the latest version of Pangolin and Nextclade containers
    echo "Checking Pangolin and Nextclade container version..."
    url=$(curl -s "https://depot.galaxyproject.org/singularity/")
    latest_version_pangolin=$(echo "$url" | grep -oP 'pangolin:[^"]+' | sort -V | tail -n 1 | awk -F'>' '{print $1}' | sed 's/<\/a//')
    latest_version_nextclade=$(echo "$url" | grep -oP 'nextclade:[^"]+' | sort -V | tail -n 1 | awk -F'>' '{print $1}' | sed 's/<\/a//')
    echo "Latest version available of Pangolin: $latest_version_pangolin."
    echo "Latest version available of Nextclade: $latest_version_nextclade."

    # Checking if latest_version_pangolin downloaded
    echo "Checking if latest version of Pangolin image is already downloaded..."
    if [ -e "/data/bi/scratch_tmp/bi/singularity-images/$latest_version_pangolin" ]; then
        echo "File $latest_version_pangolin already downloaded."
        echo "Pangolin database UP TO DATE."
    else
        echo "Downloading $latest_version_pangolin file..."
        wget -P "/data/bi/scratch_tmp/bi/singularity-images/" "https://depot.galaxyproject.org/singularity/$latest_version_pangolin"
        echo "$latest_version_pangolin file succesfully downloaded."
        echo "Setting datadir for Pangolin database."
        cd /data/bi/references/pangolin/
        mkdir $(date '+%Y%m%d')
        srun --partition short_idx singularity run -B ${PWD} /scratch/bi/singularity-images/$latest_version_pangolin pangolin --update-data --datadir ${PWD}/$(date '+%Y%m%d')/
        echo "Pangolin database UPDATED."
        cd -
    fi

    # Checking if latest_version_nextclade downloaded
    echo "Checking if latest version of Nextclade image is already downloaded..."
    if [ -e "/data/bi/scratch_tmp/bi/singularity-images/$latest_version_nextclade" ]; then
        echo "File $latest_version_nextclade already downloaded."
    else
        echo "Downloading $latest_version_nextclade file..."
        wget -P "/data/bi/scratch_tmp/bi/singularity-images/" "https://depot.galaxyproject.org/singularity/$latest_version_nextclade"
        echo "$latest_version_nextclade file succesfully downloaded."
    fi

    # Update viralrecon_sars.config file
    echo "Updating ../DOC/viralrecon_sars.config file..."
    sed -i \
        -e "s|pangolin:4.2--pyhdfd78af_1|$latest_version_pangolin|" \
        -e "s|nextclade:2.13.1--h9ee0642_0|$latest_version_nextclade|" \
        -e "s|--datadir XXXX|--datadir $(ls -dt /data/bi/references/pangolin/*/ | head -n 1)|" \
        "../DOC/viralrecon_sars.config"
    echo "File ../DOC/viralrecon_sars.config UPDATED."

    # Extracting the current SARS tag from nextclade image
    echo "Extracting SARS-CoV-2 TAG..."
    nextclade_tag=$(singularity run /data/bi/scratch_tmp/bi/singularity-images/$latest_version_nextclade nextclade dataset list --json | \
    python3 /data/bi/references/nextclade/json_parser.py)
    if [ "$nextclade_tag" == "None" ]; then
        echo "WARNING! Error during tag extraction. Please, set the tag manually (https://github.com/nextstrain/nextclade_data/releases) and consider fixing json_parser.py if needed."
        echo "WARNING! Error during tag extraction. Please, set the tag manually (https://github.com/nextstrain/nextclade_data/releases) and consider fixing json_parser.py if needed." >> warnings.log
    else
        echo "Latest SARS-CoV-2 dataset version TAG: $nextclade_tag."

    fi

    # Update viralrecon_sars_params.yml file
    sed -i "s|2023-03-16T12:00:00Z|$nextclade_tag|" "../DOC/viralrecon_sars_params.yml"
    echo "SARS-CoV-2 TAG in file ../DOC/viralrecon_sars_params.yml UPDATED."

    # Setting work variables
    ANALYSIS_TYPE=AMPLICONS
    CONFIG_FILE="../../DOC/viralrecon_sars.config"
    PARAMS_FILE="../../DOC/viralrecon_sars_params.yml"

# Preparing the enviroment for non-SARS-CoV-2 viruses
else
    ANALYSIS_TYPE=METAGENOMIC
    CONFIG_FILE="../../DOC/viralrecon_metagenomic.config"
    PARAMS_FILE="../../DOC/viralrecon_metagenomic_params.yml"

fi


mkdir -p 00-reads
cat samples_ref.txt | cut -f3 | sort -u | while read in; do echo ${in^^}; done > host_list.tmp
i=1; cat host_list.tmp | while read in
do
    FOLDER_NAME=$(echo $(date '+%Y%m%d')_ANALYSIS0${i}_${ANALYSIS_TYPE}_${in})
    mkdir ${FOLDER_NAME}
    cp create_summary_report.sh ${FOLDER_NAME}/
    cp deduplicate_long_table.sh ${FOLDER_NAME}/
    cp percentajeNs.py ${FOLDER_NAME}/
    grep -i ${in} samples_ref.txt | cut -f1,2 > ${FOLDER_NAME}/samples_ref.txt
    echo "ln -s ../00-reads ." > ${FOLDER_NAME}/lablog
    printf "ln -s ../samples_id.txt .\n\n" >> ${FOLDER_NAME}/lablog
    echo "#module load Nextflow singularity" >> ${FOLDER_NAME}/lablog
    echo "" >> ${FOLDER_NAME}/lablog
    printf 'scratch_dir=$(echo $PWD | sed "s/\/data\/bi\/scratch_tmp/\/scratch/g")\n\n' >> ${FOLDER_NAME}/lablog
    cut -f2 ${FOLDER_NAME}/samples_ref.txt | sort -u | while read ref
    do
        echo "sample,fastq_1,fastq_2" > ${FOLDER_NAME}/samplesheet_${ref}.csv
        grep -i ${ref} ${FOLDER_NAME}/samples_ref.txt | while read samples
        do
            arr=($samples); echo "${arr[0]},00-reads/${arr[0]}_R1.fastq.gz,00-reads/${arr[0]}_R2.fastq.gz" >> ${FOLDER_NAME}/samplesheet_${ref}.csv
        done
        REF_FASTA=$(find /data/bi/references/virus/ -name ${ref}.fasta)
        REF_GFF=$(find /data/bi/references/virus/ -name ${ref}.gff)
        echo "cat <<EOF > ${ref}_viralrecon.sbatch" >> ${FOLDER_NAME}/lablog
        echo "#!/bin/sh" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --ntasks 1" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --cpus-per-task 2" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --mem 4G" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --time 2:00:00" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --partition middle_idx" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --output ${ref}_$(date '+%Y%m%d')_viralrecon.log" >> ${FOLDER_NAME}/lablog
        printf "#SBATCH --chdir \$scratch_dir\n\n" >> ${FOLDER_NAME}/lablog
        printf 'export NXF_OPTS="-Xms500M -Xmx4G"\n\n' >> ${FOLDER_NAME}/lablog
        echo "nextflow run /data/bi/pipelines/nf-core-viralrecon-2.6.0/workflow/main.nf \\\\" >> ${FOLDER_NAME}/lablog
        echo "          -c ${CONFIG_FILE} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          -params-file ${PARAMS_FILE} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --input samplesheet_${ref}.csv \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --outdir ${ref}_$(date '+%Y%m%d')_viralrecon_mapping \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --fasta ${REF_FASTA} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --gff ${REF_GFF} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          -resume" >> ${FOLDER_NAME}/lablog
        printf "EOF\n\n" >> ${FOLDER_NAME}/lablog
        printf "echo 'sbatch ${ref}_viralrecon.sbatch' > _01_run_${ref}_viralrecon.sh\n\n" >> ${FOLDER_NAME}/lablog
    done
  echo "#conda activate python3" >> ${FOLDER_NAME}/lablog

  cp _02_create_run_percentage_Ns.sh ${FOLDER_NAME}/
  printf 'echo "bash create_summary_report.sh" > _04_create_stats_table.sh\n\n' >> ${FOLDER_NAME}/lablog
  cp create_assembly_stats.R ${FOLDER_NAME}/
  echo "#module load R/4.2.1" >> ${FOLDER_NAME}/lablog
  printf 'echo "Rscript create_assembly_stats.R" > _05_create_stats_assembly.sh\n\n' >> ${FOLDER_NAME}/lablog
  printf 'echo "bash deduplicate_long_table.sh" > _06_deduplicate_long_table.sh\n\n' >> ${FOLDER_NAME}/lablog

    i=$((i+1))
done
rm host_list.tmp
rm create_summary_report.sh
rm deduplicate_long_table.sh
rm percentajeNs.py
rm _02_create_run_percentage_Ns.sh
mv DATE_ANALYSIS0X_MAG $(date '+%Y%m%d')_ANALYSIS0X_MAG
cd 00-reads; cat ../samples_id.txt | xargs -I % echo "ln -s ../../RAW/%_*R1*.fastq.gz %_R1.fastq.gz" | bash; cat ../samples_id.txt | xargs -I % echo "ln -s ../../RAW/%_*R2*.fastq.gz %_R2.fastq.gz" | bash; cd -
