# LABLOG_VIRALRECON

: '
The function of this script is to setup the initial configuration for the services that
will be running the viralrecon pipeline. To do so, it sets up the required configuration
files, as well as the necessary parameters depending on the type of analysis to be carried
out (type of sequencing, processing method, etc.). It is in charge of creating a proper
working environment, by preparing and updating the software to be used in the analysis,
as well as preparing and downloading the reference sequences required for the correct
execution of the analysis.

The functions performed by the script can be listed as follows:
- Preparation of the environment depending on the type of sequencing (metagenomics/amplicons),
  the method of analysis (mapping/assembly) as well as some presets depending on the microorganism (SARS, RSV or MPV).
- Creation of the samples_ref.txt file.
- Checking of the last available version of the Pangolin container. Download if necessary. Database update. File configuration.
- Checking the last available version of the Nextclade container. Download if necessary. Extraction of the tag for the
  analysis dataset. File configuration.
- Checking of required references (fasta and gff) and downloading of from NCBI if necessary.
- Creation of the necessary directories for the analysis hosts, and subdirectories for each of the references.

'

# module load singularity

# If there is more than 1 reference, please prepare the samples_ref.txt file before running this lablog.

####################################
# Defining functions

# Coloring messages
echo_bold() { echo -e "\e[1;37m$1\e[0m"; }
echo_red() { echo -e "\e[31m$1\e[0m"; }
echo_green() { echo -e "\e[32m$1\e[0m"; }
echo_blinking_red() { echo -e "\e[1;5;97;5;41m$1\e[0m"; }


# Updating pangolin. Checks last image available and if is already downloaded. If not, downloads it. This function also updates pangolin database. Update related config files with pangolin info
update_pangolin() {
    echo
    echo_bold "Starting PANGOLIN check/update."
    echo "Checking Pangolin container version..."
    url=$(curl -s "https://depot.galaxyproject.org/singularity/")
    latest_version_pangolin=$(echo "$url" | grep -oP 'pangolin:[^"]+' | sort -V | tail -n 1 | awk -F'>' '{print $1}' | sed 's/<\/a//')
    echo_bold "Latest version available of Pangolin:\e[1;38;5;220m $latest_version_pangolin"; tput sgr0

    echo "Checking if latest version of Pangolin image is already downloaded..."
    if [ -e "/data/bi/pipelines/singularity-images/$latest_version_pangolin" ]; then
        echo "File $latest_version_pangolin already downloaded."
        echo -e "Pangolin container is UP TO DATE. \xE2\x9C\x85"
    else
        echo "Downloading $latest_version_pangolin file..."
        wget -P "/data/bi/pipelines/singularity-images/" "https://depot.galaxyproject.org/singularity/$latest_version_pangolin"
        if [ $? -eq 0 ]; then
            echo_green "$latest_version_pangolin file succesfully downloaded."
        else
            echo_blinking_red "An error occurred during file downloading."
        fi
    fi

    # Updating Pangolin database
    echo "Setting datadir for Pangolin database."
    cd /data/bi/references/pangolin/
    if [ -e "./$(date '+%Y%m%d')" ]; then
        echo -e "Pangolin database is UP TO DATE. \xE2\x9C\x85"
    else
        mkdir "$(date '+%Y%m%d')"
        srun --partition short_idx singularity run -B ${PWD} /data/bi/pipelines/singularity-images/$latest_version_pangolin pangolin --update-data --datadir ${PWD}/$(date '+%Y%m%d')/
        # log file creation
        echo -e "$(date +'%Y-%m-%d %H:%M:%S')\tmkdir $(date '+%Y%m%d')" >> $(date '+%Y%m%d')/log
        echo -e "$(date +'%Y-%m-%d %H:%M:%S')\tsrun --partition short_idx singularity run -B ${PWD} /data/bi/pipelines/singularity-images/$latest_version_pangolin pangolin --update-data --datadir ${PWD}/$(date '+%Y%m%d')/)" >> $(date '+%Y%m%d')/log
        echo_green "Pangolin database UPDATED."
    fi
    cd -

    # Updating config file
    echo "Updating $CONFIG_FILE file..."
    sed -i "s|pangolin:4.3--pyhdfd78af_2|$latest_version_pangolin|" "$CONFIG_FILE"
    sed -i "s|--datadir XXXX|--datadir $(ls -dt /data/bi/references/pangolin/*/ | head -n 1)|" "$CONFIG_FILE"
    echo_bold "File $CONFIG_FILE UPDATED."

    # Updating params file
    echo "Updating $PARAMS_FILE file..."
    sed -i "s|skip_pangolin: true|skip_pangolin: false|" "$PARAMS_FILE"
    echo_bold "File $PARAMS_FILE UPDATED."

    echo_bold "Finished PANGOLIN check/update"
    echo
}

# Updating Nextclade. Checks last image available and if is already downloaded. If not, downloads it. Update related config files with nextclade info
update_nextclade() {
    echo
    echo_bold "Starting NEXTCLADE check/update."
    echo "Checking Nextclade container version..."
    url=$(curl -s "https://depot.galaxyproject.org/singularity/")
    latest_version_nextclade=$(echo "$url" | grep -oP 'nextclade:[^"]+' | sort -V | tail -n 1 | awk -F'>' '{print $1}' | sed 's/<\/a//')
    echo_bold "Latest version available of Nextclade:\e[1;38;5;220m $latest_version_nextclade"; tput sgr0

    echo "Checking if latest version of Nextclade image is already downloaded..."
    if [ -e "/data/bi/pipelines/singularity-images/$latest_version_nextclade" ]; then
        echo "File $latest_version_nextclade already downloaded."
        echo -e "Nextclade container is UP TO DATE. \xE2\x9C\x85"
    else
        echo "Downloading $latest_version_nextclade file..."
        wget -P "/data/bi/pipelines/singularity-images" "https://depot.galaxyproject.org/singularity/$latest_version_nextclade"
        if [ $? -eq 0 ]; then
            echo_green "$latest_version_nextclade file succesfully downloaded."
        else
            echo_blinking_red "An error occurred during file downloading."
        fi
    fi

    # Extracting the current Nextclade data TAG
    echo "Extracting Nextclade data TAG..."
    nextclade_tag=$(singularity run /data/bi/pipelines/singularity-images/$latest_version_nextclade nextclade dataset list --json | grep -zoP "\"path\":\s*\"nextstrain/${virus_tag}[^\"]*\"[\s\S]*?\"tag\":\s*\"\K[^\"]*" | tr '\0' '\n' | head -n 1)
    echo_bold "Latest \e[1;38;5;220m${virus_tag^^} \e[1;37mNextclade dataset version TAG:\e[1;38;5;220m $nextclade_tag"; tput sgr0
    
    # Updating config file
    echo "Updating $CONFIG_FILE file..."
    sed -i "s|nextclade:3.5.0--h9ee0642_0|$latest_version_nextclade|" "$CONFIG_FILE"
    echo_bold "File $CONFIG_FILE UPDATED."

    # Updating params file
    echo "Updating $PARAMS_FILE file..."
    sed -i "s|skip_nextclade: true|skip_nextclade: false|" "$PARAMS_FILE"
    echo "nextclade_dataset_name: '$virus_tag'" >> $PARAMS_FILE
    echo "nextclade_dataset: false" >> $PARAMS_FILE
    echo "nextclade_dataset_tag: '$nextclade_tag'" >> $PARAMS_FILE
    echo_bold "File $PARAMS_FILE UPDATED."

    echo_bold "Finished NEXTCLADE check/update"
    echo
}

# Checks if fasta and gff references are downloaded. If not, it downloads them (and creates family folder if neccesary)
check_references() {
    echo
    echo_bold "Processing reference: ${ref}."

    # Obtaining family information
    obtain_family() {
        organism_id=$(curl -s "https://www.ncbi.nlm.nih.gov/nuccore/${ref}" | grep -o 'ORGANISM=[0-9]\+' | head -n 1 | awk -F '=' '{print $2}')
        if [ -z $organism_id ]; then
            echo_blinking_red "$ref not found in NCBI. Please download it manually."
            return
        fi
        family=$(curl -s "https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=${organism_id}" | grep -o 'TITLE="family">.*<' | awk -F 'TITLE="family">' '{print $2}' | cut -d '<' -f 1 | tr '[:upper:]' '[:lower:]')
        if [ -z $family ]; then
            family=$(curl -s "https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=${organism_id}" | grep -o 'ALT="family">.*<' | awk -F 'ALT="family">' '{print $2}' | cut -d '<' -f 1 | tr '[:upper:]' '[:lower:]')
        fi
        echo "Reference $ref belongs to $family family."
    }

    # Check if FASTA sequence is already downloaded
    REF_FASTA=$(refgenie seek ${family}/fasta.fasta:${ref} -c /data/bi/references/refgenie/genome_config.yaml 2>&1)
    if echo "$REF_FASTA" | grep -q "Traceback"; then
        echo "File ${ref}.fasta is not yet downloaded."
        obtain_family; if [ -z $family ]; then return; fi
        if [ ! -e "/data/bi/references/refgenie/alias/${family}" ]; then # Check if directory doesn't exists
            echo "Creating new directory: /data/bi/references/refgenie/alias/${family}/ and saving file ${ref}.fasta in /data/bi/references/refgenie/alias/${family}/fasta/${ref}."
            digest=$(openssl rand -hex 24)
            refgenie alias set --aliases ${family} --digest ${digest} -f -c /data/bi/references/refgenie/genome_config.yaml
            mkdir -p /data/bi/references/refgenie/data/${digest}/fasta/${ref}/
            wget -q -O "/data/bi/references/refgenie/data/${digest}/fasta/${ref}/${ref}.fasta" "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=${ref}&rettype=fasta&retmode=text"
            if [ $? -eq 0 ]; then
                echo_green "File ${ref}.fasta downloaded in $REF_FASTA."
                refgenie add ${family}/fasta:${ref} --path data/${digest}/fasta/${ref}/ --seek-keys '{"fasta" : "'"${ref}.fasta"'"}' -c /data/bi/references/refgenie/genome_config.yaml
            else
                echo_blinking_red "An error occurred during file downloading."
            fi
        else
            echo "Directory /data/bi/references/refgenie/alias/${family}/ ALREADY EXISTS. Downloading ${ref}.fasta."
            digest=$(refgenie alias get -a ${family} -c /data/bi/references/refgenie/genome_config.yaml)
            mkdir -p /data/bi/references/refgenie/data/${digest}/fasta/${ref}/
            wget -q -O "/data/bi/references/refgenie/data/${digest}/fasta/${ref}/${ref}.fasta" "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=${ref}&rettype=fasta&retmode=text"
            if [ $? -eq 0 ]; then 
                echo_green "File ${ref}.fasta downloaded in $REF_FASTA."
                refgenie add ${family}/fasta:${ref} --path data/${digest}/fasta/${ref}/ --seek-keys '{"fasta" : "'"${ref}.fasta"'"}' -c /data/bi/references/refgenie/genome_config.yaml
            else
                echo_blinking_red "An error occurred during file downloading."
            fi
        fi
    else
        echo -e "File ${ref}.fasta is ALREADY available in $(dirname $REF_FASTA). \xE2\x9C\x85"
    fi

    # Check if GFF file is already downloaded
    REF_GFF=$(refgenie seek ${family}/gff.gff:${ref} -c /data/bi/references/refgenie/genome_config.yaml 2>&1)
    if echo "$REF_GFF" | grep -q "Traceback"; then 
        echo "File ${ref}.gff is not yet downloaded."
        if [ ! -v ${family} ]; then obtain_family; if [ -z ${family} ]; then return; fi; fi
        if [ ! -e "/data/bi/references/refgenie/alias/${family}" ]; then # Check if directory doesn't exist
            echo "Creating new directory: /data/bi/references/refgenie/alias/${family}/ and saving file ${ref}.gff in /data/bi/references/refgenie/alias/${family}/gff/${ref}."
            digest=$(openssl rand -hex 24)
            refgenie alias set --aliases ${family} --digest ${digest} -f -c /data/bi/references/refgenie/genome_config.yaml
            mkdir -p /data/bi/references/refgenie/data/${digest}/ensembl_rb/${ref}/
            wget -q -O "/data/bi/references/refgenie/data/${digest}/ensembl_rb/${ref}/${ref}.gff" "https://www.ncbi.nlm.nih.gov/sviewer/viewer.cgi?db=nuccore&report=gff3&id=${ref}"
            if [ $? -eq 0 ]; then
                echo_green "File ${ref}.gff downloaded in $REF_GFF."
                refgenie add ${family}/gff:${ref} --path data/${digest}/ensembl_rb/${ref}/ --seek-keys '{"gff" : "'"${ref}.gff"'"}' -c /data/bi/references/refgenie/genome_config.yaml
            else
                echo_blinking_red "An error occurred during file downloading."
            fi
         else
            echo "Directory /data/bi/references/refgenie/alias/${family}/ ALREADY EXISTS. Downloading ${ref}.gff."
            digest=$(refgenie alias get -a ${family} -c /data/bi/references/refgenie/genome_config.yaml)
            mkdir -p /data/bi/references/refgenie/data/${digest}/ensembl_rb/${ref}/
            wget -q -O "/data/bi/references/refgenie/data/${digest}/ensembl_rb/${ref}/${ref}.gff" "https://www.ncbi.nlm.nih.gov/sviewer/viewer.cgi?db=nuccore&report=gff3&id=${ref}"
            if [ $? -eq 0 ]; then 
                echo_green "File ${ref}.gff downloaded in $REF_GFF."
                refgenie add ${family}/gff:${ref} --path data/${digest}/ensembl_rb/${ref}/ --seek-keys '{"gff" : "'"${ref}.gff"'"}' -c /data/bi/references/refgenie/genome_config.yaml
            else
                echo_blinking_red "An error occurred during file downloading."
            fi
         fi
    else
        echo -e "File ${ref}.gff is ALREADY available in $(dirname $REF_GFF). \xE2\x9C\x85"
    fi

    unset family
}
####################################

# Setting work variables
CONFIG_FILE="../DOC/viralrecon.config"
PARAMS_FILE="../DOC/viralrecon_params.yml"

# Setting the type of analysis
echo_bold "\nPlease specify the type of analysis."
echo_bold "1. METAGENOMICS"
echo_bold "2. AMPLICONS"
while true; do
    echo -ne "\e[1;38;5;220m"; read -n 1 ANALYSIS_TYPE; tput sgr0; echo
    if [ "$ANALYSIS_TYPE" == "1" ]; then
        ANALYSIS_TYPE="METAGENOMIC"
        echo_green "$ANALYSIS_TYPE analysis selected."
        break
    elif [ "$ANALYSIS_TYPE" == "2" ]; then
        ANALYSIS_TYPE="AMPLICONS"
        echo_green "$ANALYSIS_TYPE analysis selected."
        break
    else
        echo_red "Invalid input. Please enter 1 or 2."
    fi
done

echo_bold "\nPlease specify the method to be performed."
    echo_bold "1. Mapping"
    echo_bold "2. De novo assemby"
    echo_bold "3. Both"
    while true; do
        echo -ne "\e[1;38;5;220m"; read -n 1 method; tput sgr0; echo
        if [ "$method" == "1" ]; then
            echo_green "Mapping method selected."
            break
        elif [ "$method" == "2" ]; then
            echo_green "De novo assembly method selected."
            sed -i "s|skip_assembly: true|skip_assembly: false|" "$PARAMS_FILE"
            sed -i "s|skip_variants: false|skip_variants: true|" "$PARAMS_FILE"
            break
        elif [ "$method" == "3" ]; then
            echo_green "Mapping + de novo assembly methods selected."
            sed -i "s|skip_assembly: true|skip_assembly: false|" "$PARAMS_FILE"
            break
        else
            echo_red "Invalid input. Please select a valid number."
        fi
    done


# Setting samples_ref.txt file
echo
read -p $'\e[1;37mIs samples_ref.txt file already prepared? [y/N]: \e[1;38;5;220m' -n 1 samples_ref_prepared; tput sgr0; echo
if [ "$samples_ref_prepared" == "y" ]; then 
    echo -e "File samples_ref.txt READY. \xE2\x9C\x85"
else
    : > samples_ref.txt
    echo "File samples_ref NOT prepared."
    while [ -z "$host" ] || [ -z "$reference" ] || [ "$answer" = "n" ]; do
        read -p $'\e[1;37mPlease specify the host: \e[1;38;5;220m' host
        read -p $'\e[1;37mPlease specify the reference: \e[1;38;5;220m' reference
        read -p $'\e[1;37mAre host [\e[1;38;5;220m'"${host^^}"$'\e[1;37m] and reference [\e[1;38;5;220m'"${reference}"$'\e[1;37m] correct? [Y/n]: \e[1;38;5;220m' -n 1 answer; tput sgr0; echo
    done
    while read in; do echo -e "${in}\t${reference}\t${host^^}" >> samples_ref.txt; done < samples_id.txt
    echo -e "File samples_ref.txt READY. \xE2\x9C\x85"
fi


# Preparing enviroment for METAGENOMIC analysis
if [ "$ANALYSIS_TYPE" = "METAGENOMIC" ]; then

    # Nextclade is able to analyze monkeypox virus
    echo
    read -p $'\e[1;37mDo the sequences correspond to monkeypox virus (MPV)? [y/N]: \e[1;38;5;220m' -n 1 monkeypox; tput sgr0; echo
    if [ "$monkeypox" == "y" ]; then

        virus_tag='mpox'
        # Update Nextclade
        update_nextclade

    fi

# Preparing enviroment for AMPLICONS analysis
else

    sed -i "s|protocol: 'metagenomic'|protocol: 'amplicon'|" $PARAMS_FILE

    echo_bold "\nPlease specify the organism to which the sequences correspond."
    echo_bold "1. SARS-CoV-2"
    echo_bold "2. RSV"
    echo_bold "3. Other"
    while true; do
        echo -ne "\e[1;38;5;220m"; read -n 1 virus_tag; tput sgr0; echo
        if [ "$virus_tag" == "1" ]; then
            virus_tag="sars-cov-2"
            echo_green "${virus_tag^^} virus selected."
            break
        elif [ "$virus_tag" == "2" ]; then
            virus_tag="rsv"
            echo_green "${virus_tag^^} virus selected."
            break
        elif [ "$virus_tag" == "3" ]; then
            virus_tag="Other"
            echo_green "$virus_tag virus selected."
            break
        else
            echo_red "Invalid input. Please select a valid number."
        fi
    done

    # Preparing the environment for SARS-CoV-2 analysis
    if [ "$virus_tag" == "sars-cov-2" ]; then
        # Update Nextclade and Pangolin
        update_nextclade
        update_pangolin

        echo "primer_bed: '/data/bi/references/virus/2019-nCoV/amplicons/NC_045512.2/V4.1/artic_v4-1_ncov-2019-primer.scheme.bed'" >> $PARAMS_FILE

    elif [ "$virus_tag" == "rsv" ]; then       
        # Update Nextclade
        update_nextclade
        sed -i '/^nextclade_dataset_name/d' $PARAMS_FILE

        echo_bold "\nRemember to provide the complete route to primer_bed and primer_fasta files, and specify the nextclade_dataset_name in every sbatch file before running the pipeline."

    else
        echo "primer_bed: '../REFERENCES/XXXX'" >> $PARAMS_FILE
        echo_bold "\nRemember to provide the complete route to PRIMER_BED file in $PARAMS_FILE file before running the pipeline."
    fi

fi

mkdir -p 00-reads
cat samples_ref.txt | cut -f3 | sort -u | while read in; do echo ${in^^}; done > host_list.tmp
i=1; cat host_list.tmp | while read in
do
    FOLDER_NAME=$(echo $(date '+%Y%m%d')_ANALYSIS0${i}_${ANALYSIS_TYPE}_${in})
    mkdir ${FOLDER_NAME}
    cp create_summary_report.sh ${FOLDER_NAME}/
    cp deduplicate_long_table.sh ${FOLDER_NAME}/
    cp percentajeNs.py ${FOLDER_NAME}/
    grep -i ${in} samples_ref.txt | cut -f1,2 > ${FOLDER_NAME}/samples_ref.txt
    echo "ln -s ../00-reads ." > ${FOLDER_NAME}/lablog
    printf "ln -s ../samples_id.txt .\n\n" >> ${FOLDER_NAME}/lablog
    printf "#module load Nextflow singularity\n\n" >> ${FOLDER_NAME}/lablog
    printf 'scratch_dir=$(echo $PWD | sed "s/\/data\/bi\/scratch_tmp/\/scratch/g")\n\n' >> ${FOLDER_NAME}/lablog
    cut -f2 ${FOLDER_NAME}/samples_ref.txt | sort -u | while read ref
    do
        echo "sample,fastq_1,fastq_2" > ${FOLDER_NAME}/samplesheet_${ref}.csv
        grep -i ${ref} ${FOLDER_NAME}/samples_ref.txt | while read samples
        do
            arr=($samples); echo "${arr[0]},00-reads/${arr[0]}_R1.fastq.gz,00-reads/${arr[0]}_R2.fastq.gz" >> ${FOLDER_NAME}/samplesheet_${ref}.csv
        done
        check_references
        echo "cat <<EOF > ${ref}_viralrecon.sbatch" >> ${FOLDER_NAME}/lablog
        echo "#!/bin/sh" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --ntasks 1" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --cpus-per-task 2" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --mem 4G" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --time 2:00:00" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --partition middle_idx" >> ${FOLDER_NAME}/lablog
        echo "#SBATCH --output ${ref}_$(date '+%Y%m%d')_viralrecon.log" >> ${FOLDER_NAME}/lablog
        printf "#SBATCH --chdir \$scratch_dir\n\n" >> ${FOLDER_NAME}/lablog
        printf 'export NXF_OPTS="-Xms500M -Xmx4G"\n\n' >> ${FOLDER_NAME}/lablog
        echo "nextflow run /data/bi/pipelines/nf-core-viralrecon/nf-core-viralrecon-2.6.0/workflow/main.nf \\\\" >> ${FOLDER_NAME}/lablog
        echo "          -c ../${CONFIG_FILE} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          -params-file ../${PARAMS_FILE} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --input samplesheet_${ref}.csv \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --outdir ${ref}_$(date '+%Y%m%d')_viralrecon_mapping \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --fasta ${REF_FASTA} \\\\" >> ${FOLDER_NAME}/lablog
        echo "          --gff ${REF_GFF} \\\\" >> ${FOLDER_NAME}/lablog
        if [ "$virus_tag" == 'rsv' ]; then
            echo "          --primer_bed ../../REFERENCES/XXXX \\\\" >> ${FOLDER_NAME}/lablog
            echo "          --primer_fasta ../../REFERENCES/XXXX \\\\" >> ${FOLDER_NAME}/lablog
            if [ $ref == "EPI_ISL_18668201" ]; then
                echo "          --nextclade_dataset_name 'rsv_a' \\\\" >> ${FOLDER_NAME}/lablog
            elif [ $ref == "EPI_ISL_1653999" ]; then
                echo "          --nextclade_dataset_name 'rsv_b' \\\\" >> ${FOLDER_NAME}/lablog
            else
                echo "          --nextclade_dataset_name 'rsv_X' \\\\" >> ${FOLDER_NAME}/lablog
            fi
        fi
        echo "          -resume" >> ${FOLDER_NAME}/lablog
        printf "EOF\n\n" >> ${FOLDER_NAME}/lablog
        printf "echo 'sbatch ${ref}_viralrecon.sbatch' > _01_run_${ref}_viralrecon.sh\n\n" >> ${FOLDER_NAME}/lablog
    done
    echo "#conda activate python3" >> ${FOLDER_NAME}/lablog

    cp _02_create_run_percentage_Ns.sh ${FOLDER_NAME}/
    printf 'echo "bash create_summary_report.sh" > _04_create_stats_table.sh\n\n' >> ${FOLDER_NAME}/lablog
    cp create_assembly_stats.R ${FOLDER_NAME}/
    echo "#module load R/4.2.1" >> ${FOLDER_NAME}/lablog
    printf 'echo "Rscript create_assembly_stats.R" > _05_create_stats_assembly.sh\n\n' >> ${FOLDER_NAME}/lablog
    printf 'echo "bash deduplicate_long_table.sh" > _06_deduplicate_long_table.sh\n\n' >> ${FOLDER_NAME}/lablog

    i=$((i+1))
done
rm host_list.tmp
rm create_summary_report.sh
rm deduplicate_long_table.sh
rm percentajeNs.py
rm _02_create_run_percentage_Ns.sh
cd 00-reads; cat ../samples_id.txt | xargs -I % echo "ln -s ../../RAW/%_*R1*.fastq.gz %_R1.fastq.gz" | bash; cat ../samples_id.txt | xargs -I % echo "ln -s ../../RAW/%_*R2*.fastq.gz %_R2.fastq.gz" | bash; cd ..

echo_green "\nLablog_viralrecon execution has been completed successfully!"
