/*
    HPC XTUTATIS CONFIGURATION
*/

singularity {
        enabled                 = true
        autoMounts              = true
        singularity.cacheDir    = '/data/bi/pipelines/singularity-images'
}

process {
    executor        = 'slurm'
	queue           = 'middle_idx'
	jobName         = { "$task.name - $task.hash" }
    conda           = null
	
	errorStrategy = { task.exitStatus in [140,143,137,138,104,134,139] ? 'retry' : 'finish'; task.exitStatus in [1,4,255] ? 'ignore' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'

    withName:PROKKA {
        container = 'https://zenodo.org/records/10496286/files/bioconda_prokka_v1.14.6_signalp_v4.1.sif?download=1'
        errorStrategy = { task.exitStatus in [2] ? 'retry' : 'finish'}
        maxRetries = 2
        maxErrors = '-1'
    }
}

params {
	max_memory = 376.GB
	max_cpus = 32
	max_time = '48.h'
}

/*
    CUSTOM OUTPUT FOLDER STRUCTURE -- modules.config
*/
params { publish_dir_mode = 'copy' }
process {
	withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
		maxRetries = 2
        	memory = {12.GB * task.attempt}
		publishDir = [
			[
                path: { "${params.outdir}/01-processing/fastqc/raw" },
                pattern: "*.{json,html}",
                mode: params.publish_dir_mode
		    ],
            [
			path: { "${params.outdir}/01-processing/fastqc/raw/zips" },
            pattern: "*.zip",
            mode: params.publish_dir_mode
		    ]
        ]
	}
	withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTP' {
		publishDir = [
			[
                path: { "${params.outdir}/01-processing/fastp" },
                mode: params.publish_dir_mode,
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/01-processing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/01-processing/fastp/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
		]
	}
	withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
		maxRetries = 2
        	memory = {12.GB * task.attempt}
		publishDir = [
			[
                path: { "${params.outdir}/01-processing/fastqc/trim" },
                pattern: "*.{json,html}",
                mode: params.publish_dir_mode
            ],
            [
			    path: { "${params.outdir}/01-processing/fastqc/trim/zips" },
                pattern: "*.zip",
                mode: params.publish_dir_mode
            ]
		]
	}
    withName: 'NANOPLOT' {
        publishDir = [
            path: { "${params.outdir}/01-processing/nanoplot" },
            pattern: "*.txt",
            mode: params.publish_dir_mode
        ]
    }
    withName: 'PYCOQC' {
        publishDir = [
            path: { "${params.outdir}/01-processing/pycoqc" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'PORECHOP_PORECHOP' {
        publishDir = [
            [
                path: { "${params.outdir}/01-processing/porechop" },
                pattern: "*.fastq.gz",
                mode: params.publish_dir_mode,
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/01-processing/porechop/logs" },
                pattern: "*.log",
                mode: params.publish_dir_mode,
            ]
        ]
    } 
    withName: '.*:.*:KMERFINDER_SUBWORKFLOW:FIND_DOWNLOAD_REFERENCE' {
        publishDir = [
            path: { "${params.outdir}/../../REFERENCES" },
            pattern: "*.{fna,gff}.gz",
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')){
                    null
                } else {
                    "${refmeta.toString().replace(' ', '_')}/${filename}"
                }
            }
        ]
    }
	withName: '.*:.*:KMERFINDER_SUBWORKFLOW:KMERFINDER' {
		maxRetries = 2
        	memory = {12.GB * task.attempt}
        	errorStrategy = { task.exitStatus in [1] ? 'retry' : 'finish'}
		publishDir = [
            path: { "${params.outdir}/02-taxonomy_contamination/kmerfinder/${meta.id}" },
            mode: params.publish_dir_mode
        ]
	}
    withName: '.*:.*:KMERFINDER_SUBWORKFLOW:KMERFINDER_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/99-stats" },
            mode: params.publish_dir_mode
        ]
    }
	withName: 'KRAKEN2|KRAKEN2_LONG' {
        publishDir = [
            path: { "${params.outdir}/02-taxonomy_contamination/kraken2" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'UNICYCLER|CANU|MINIASM|DRAGONFLYE' {
        maxRetries = 2
        memory = {64.GB * task.attempt}
	publishDir = [
            path: { "${params.outdir}/03-assembly/${params.assembler}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                        if (filename.endsWith('.scaffolds.fa.gz') || 
                                filename.endsWith('.contigs.fasta.gz') || 
                                filename.endsWith('.contigs.fa') || 
                                filename.endsWith('.fasta.gz')) {
                            "${meta.id}.fasta.gz"
                        } else {
                            null
                        }
                    }
            ]
    }
    withName: 'RACON|MEDAKA|NANOPOLISH' {
        publishDir = [
            path: { "${params.outdir}/03-assembly/${params.assembler}/${params.polish_method}" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'QUAST|QUAST_BYREFSEQID' {
        publishDir = [
            path: { "${params.outdir}/03-assembly/quast" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml') || filename.endsWith('.tsv')){
                    null
                } else if (filename.startsWith('GCF')){
                    "per_reference_reports/${filename}"
                }
                else if (!filename.startsWith('GCF')) {
                    "global_${filename}"
                }
            }
        ]
    }
    withName: 'PROKKA' {
        ext.args = {
            [
                '--force',
                params.prokka_args ? "${params.prokka_args}" : ''
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/05-annotation/prokka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BAKTA_BAKTA' {
        ext.args = {
            [
                '--force',
                params.bakta_args ? "${params.bakta_args}" : ''
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/05-annotation/bakta/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MULTIQC_CUSTOM' {
        publishDir = [
            [ 
                path: { "${params.outdir}/99-stats/multiqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> 
                    if (filename.equals('versions.yml') || filename.endsWith('.csv')) {
                        null
                    } else {
                        filename
                    }
                }
            ],
            [
                path: { "${params.outdir}/99-stats" },
                mode: params.publish_dir_mode,
                pattern: "*.csv"
            ]
        ]
    }
}
