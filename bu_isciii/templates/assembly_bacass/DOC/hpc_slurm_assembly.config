/*
    HPC XTUTATIS CONFIGURATION
*/

singularity {
        enabled                 = true
        autoMounts              = true
		singularity.cacheDir    = '/data/bi/pipelines/singularity-images/nf-core-bacass'
}

process {
    executor        = 'slurm'
	queue           = 'middle_idx'
	jobName         = { "$task.name - $task.hash" }
	conda           = null
	
	errorStrategy = { task.exitStatus in [140,143,137,138,104,134,139] ? 'retry' : 'finish'; task.exitStatus in [1,4,255] ? 'ignore' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'

	// Add Xtutatis labels
	withLabel:process_low {
		cpus   = 4
		memory = 24.GB
		time   = 6.h
	}
	withLabel:process_medium {
		cpus   = 8
		memory = 42.GB
		time   = 6.h
	}
	withLabel:process_high {
		cpus   = 12
		memory = 84.GB
		time   = 8.h
	}
}

params {
	max_memory = 376.GB
	max_cpus = 32
	max_time = '48.h'
}

/*
    CUSTOM OUTPUT FOLDER STRUCTURE
*/

params { publish_dir_mode = 'copy' }
process {
	withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_RAW' {
		publishDir = [
			path: { "${params.outdir}/01-processing/fastqc/raw" },
            pattern: "*.{json,html}",
            mode: params.publish_dir_mode
		]
	}
	withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTP' { 
		publishDir = [
			path: { "${params.outdir}/01-processing/fastp" },
            mode: params.publish_dir_mode
		]
	}
	withName: '.*:.*:FASTQ_TRIM_FASTP_FASTQC:FASTQC_TRIM' {
		publishDir = [
			path: { "${params.outdir}/01-processing/fastqc/trim" },
            mode: params.publish_dir_mode
		]
	}
    withName: 'NANOPLOT' {
        publishDir = [
            path: { "${params.outdir}/01-processing/nanoplot" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'PYCOQC' {
        publishDir = [
            path: { "${params.outdir}/01-processing/pycoqc" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'PORECHOP_PORECHOP' {
        publishDir = [
            path: { "${params.outdir}/01-processing/porechop" },
            mode: params.publish_dir_mode
        ]
    }
	withName: '.*:.*:KMERFINDER_SUBWORKFLOW:KMERFINDER' {
		publishDir = [
            path: { "${params.outdir}/02-taxonomy_contamination/kmerfinder/${meta.id}" },
            mode: params.publish_dir_mode
        ]
	}
    withName: '.*:.*:KMERFINDER_SUBWORKFLOW:KMERFINDER_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/99-stats" },
            mode: params.publish_dir_mode
        ]
    }
	withName: 'KRAKEN2|KRAKEN2_LONG' {
        publishDir = [
            path: { "${params.outdir}/02-taxonomy_contamination/kraken2" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'UNICYCLER|CANU|MINIASM|DRAGONFLYE' {
        publishDir = [
            path: { "${params.outdir}/03-assembly/${params.assembler}" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'RACON|MEDAKA|NANOPOLISH' {
        publishDir = [
            path: { "${params.outdir}/03-assembly/${params.assembler}/${params.polish_method}" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'QUAST' {
        publishDir = [
            path: { "${params.outdir}/03-assembly/quast" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'PROKKA|BAKTA|DFAST' {
        publishDir = [
            path: { "${params.outdir}/05-annotation/${params.annotation_tool}" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'MULTIQC' {
        publishDir = [
            [ 
                path: { "${params.outdir}/99-stats/multiqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> 
                    if (filename.equals('versions.yml') || filename.endsWith('.csv')) {
                        null
                    } else {
                        filename
                    }
                }
            ],
            [
                path: { "${params.outdir}/99-stats" },
                mode: params.publish_dir_mode,
                pattern: "*.csv"
            ]
        ]
    }
}
