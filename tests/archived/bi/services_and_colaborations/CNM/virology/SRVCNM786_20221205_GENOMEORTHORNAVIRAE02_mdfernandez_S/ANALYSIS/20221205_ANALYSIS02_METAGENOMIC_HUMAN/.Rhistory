####DESeq2 libraries
library(DESeq2)
library(tximport)
library(readr)
####fishpond libraries
library(fishpond)
library(tximeta)
library(SummarizedExperiment)
####Other libraries
library(optparse)
#library(xlsx)
#options(java.parameters = "-Xmx4G")
library(dplyr)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
library(vsn)
library(crayon)
library(tidytable)
library(data.table)
option_list <- list(
make_option(c("-d", "--differential_expression" ), type="character" , default='DEG'                  , metavar="string" , help="Type of differential expression to perform. DEG for Differentially expressed genes. DET for differential expressed transcripts."),
make_option(c("-e", "--deseq2"                  ), type="logical"   , default=TRUE                   , metavar="boolean", help="Perform DESeq2 DE or not."                                                                                                      ),
make_option(c("-f", "--fishpond"                ), type="logical"   , default=TRUE                   , metavar="boolean", help="Perform fishpond DE or not."                                                                                                    ),
make_option(c("-r", "--rnaseq_dir"              ), type="character" , default='../../01-rnaseq'      , metavar="path"   , help="Path to rna-seq results"                                                                                                        ),
make_option(c("-s", "--sample_data"             ), type="character" , default='../clinical_data.txt' , metavar="path"   , help="Path to clinical data file"                                                                                                     ),
make_option(c("-g", "--group_col"               ), type="character" , default='Group'                , metavar="string" , help="Colname with the sample classes in sample_data of the experiment for the DE."                                                   ),
make_option(c("-i", "--batch_col"               ), type="character" , default='batch'                , metavar="string" , help="Colname of the column with the batch information."                                                                              ),
make_option(c("-a", "--alpha"                   ), type="integer"   , default=NULL                   , metavar="integer", help="Alpha value to filter genes by p-value before BH correction in padj. Must be between 1 and 0"                                   ),
make_option(c("-t", "--treatment"               ), type="character" , default=NULL                   , metavar="string" , help="Treatment group name."                                                                                                          ),
make_option(c("-c", "--control"                 ), type="character" , default=NULL                   , metavar="string" , help="Control group name."                                                                                                            ),
make_option(c("-b", "--batch_effect"            ), type="logical"   , default=FALSE                  , metavar="boolean", help="Correct by batch effect"                                                                                                        ),
make_option(c("-n", "--norm_counts"             ), type="logical"   , default=FALSE                  , metavar="boolean", help="Create table with normalized counts"                                                                                            ),
make_option(c("-q", "--quality_plots"           ), type="logical"   , default=TRUE                   , metavar="boolean", help="Create quality plots or not."                                                                                                   )
)
opt_parser <- OptionParser(option_list=option_list)
opt        <- parse_args(opt_parser)
opt$rnaseq_dir
opt$rnaseq_dir <- "../../01-20221123_rnaseq/"
opt$differential_expression
opt$treatment <- "MM_Dif"
opt$control <- "MX_Dif"
opt$norm_counts <- TRUE
if (is.null(opt$treatment)){
print_help(opt_parser)
stop("Please provide treatment group name", call.=FALSE)
}
if (is.null(opt$control)){
print_help(opt_parser)
stop("Please provide control group name", call.=FALSE)
}
if (opt$differential_expression == "DEG" && !opt$deseq2){
print_help(opt_parser)
stop("Gene differential expression must be performed using DESeq2", call.=FALSE)
}
####LOAD CLINICAL DATA FILE#########################
load_sample_data <- function(clinical_data, group) {
samples <- read.table(clinical_data, header = T)
compare_col <- which(colnames(samples) %in% group)
if (opt$batch_effect) {
batch_col <- which(colnames(samples) %in% opt$batch_col)
samples <- samples[,c(1,compare_col, batch_col)]
colnames(samples) <- c("names","condition","batch")
} else {
samples <- samples[,c(1,compare_col)]
colnames(samples) <- c("names","condition")
}
rownames(samples) <- samples$names
return(samples)
}
load_transcript_data_fishpond <- function(coldata_table, compare_char1, compare_char2){
#####Load quantification data####
tximeta_data<- tximeta(coldata_table)
scaled_inferential_replicates <- scaleInfReps(tximeta_data)
#####Select data to compare
scaled_inferential_replicates_selected <- scaled_inferential_replicates[,scaled_inferential_replicates$condition %in% c(compare_char1,compare_char2)]
scaled_inferential_replicates_selected$condition <- factor(scaled_inferential_replicates_selected$condition, levels=c(compare_char1,compare_char2))
####Filter expression minimum 1 count and 1 sample
scaled_inferential_replicates_selected <- labelKeep(scaled_inferential_replicates_selected, minCount = 1, minN = 1)
scaled_inferential_replicates_selected <- scaled_inferential_replicates_selected[mcols(scaled_inferential_replicates_selected)$keep,]
return(scaled_inferential_replicates_selected)
}
deseq2_analysis <- function(txi_data, samples, compare_char1, compare_char2){
if (opt$batch_effect) {
ddsTxi <- DESeqDataSetFromTximport(txi_data,
colData = samples,
design = ~ batch + condition)
} else {
ddsTxi <- DESeqDataSetFromTximport(txi_data,
colData = samples,
design = ~ condition)
}
dds <- ddsTxi[ rowSums(counts(ddsTxi)) >= 1, ]
dds <- DESeq(dds)
if (is.null(opt$alpha)){
res <- results(dds,contrast = c("condition",compare_char1,compare_char2))
} else {
res <- results(dds,contrast = c("condition",compare_char1,compare_char2), alpha = opt$alpha)
}
return(list(dds_matrix = dds, results =res))
}
normalized_counts <- function(dds_table){
ntd <- normTransform(dds_table)
if (opt$batch_effect) {
mat_ntd <- assay(ntd)
mat_ntd <- limma::removeBatchEffect(mat_ntd, ntd$Batch)
assay(ntd) <- mat_ntd
}
rld <- rlog(dds_table, blind=FALSE)
if (opt$batch_effect) {
mat_rld <- assay(rld)
mat_rld <- limma::removeBatchEffect(mat_rld, rld$Batch)
assay(rld) <- mat_rld
}
vsd <- varianceStabilizingTransformation(dds_table, blind=FALSE)
if (opt$batch_effect) {
mat_vsd <- assay(vsd)
mat_vsd <- limma::removeBatchEffect(mat_vsd, vsd$Batch)
assay(vsd) <- mat_vsd
}
if (opt$batch_effect) {
mat_dds <- assay(dds_table)
mat_dds <- limma::removeBatchEffect(mat_dds, dds_table$Batch)
assay(dds_table) <- mat_dds
}
return(list(dds_norm=dds_table, norm = ntd, rlogtrans =rld, varstab=vsd))
}
subset_samples <- function(samples_data, compare_char1, compare_char2, norm_data){
row_1 <- which(samples_data$condition %in% compare_char1)
row_2 <- which(samples_data$condition %in% compare_char2)
row_nums <- c(row_1,row_2)
sample_list <- rownames(samples_data[row_nums,, drop = FALSE])
dds_subset <- norm_data$dds_norm[,sample_list]
ntd_subset <- norm_data$norm[,sample_list]
rld_subset <- norm_data$rlogtrans[,sample_list]
vsd_subset <- norm_data$varstab[,sample_list]
return(list(subset_dds = dds_subset, subset_ntd =ntd_subset, subset_rld=rld_subset, subset_vsd=vsd_subset))
}
differential_plots <- function(res_de, de_results, ntd_subset, dds_subset){
#MA-plotThe  MA-plot  shows  the  log2  fold  changes  from  the  treatment  over  the  meanof  normalized  counts.
#The  average  of  counts  normalized  by  size  factor.
pdf(file="Differential_expression/DESeq2/maPlot_all.pdf")
plotMA( res_de, ylim = c(-1, 1) )
dev.off()
#############DISPERSION PLOTS################
pdf(file="Differential_expression/DESeq2/pvalues.pdf")
hist( res_de$pvalue, breaks=20, col="grey", main = "pvalues test for differential expression")
dev.off()
##############PHEATMAP##############
assay_ntd <- assay(ntd_subset)
ordered_table <- de_results[order(de_results$padj, abs(de_results$log2FoldChange)),]
ordered_table$identifier <- rownames(ordered_table)
col_num <- which(colnames(ordered_table) == "identifier")
top_sig_genes <- ordered_table[1:20,col_num]
select <- which(rownames(assay_ntd) %in% top_sig_genes)
df <- as.data.frame(colData(dds_subset)[,c("condition")])
colnames(df) <- c("condition")
rownames(df) <- colnames(ntd_subset)
pdf(file="Differential_expression/DESeq2/heatmapCount_top20_differentially_expressed.pdf")
pheatmap(assay(ntd_subset)[select,], cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=TRUE, annotation_col=df, main="Top 20 significant genes")
dev.off()
}
quality_plots <- function(data_subset){
###########SAMPLE DISTANCE##############
sampleDists <- dist( t( assay(data_subset$subset_rld) ) )
sampleDistMatrix <- as.matrix( sampleDists )
colours = colorRampPalette(rev(brewer.pal(9, "Blues"))) (255)
pdf(file="Quality_plots/DESeq2/heatmap_sample_to_sample.pdf")
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colours)
dev.off()
#############PCA PLOTS################
pcaData <- plotPCA(data_subset$subset_rld, intgroup=c("condition"), returnData=TRUE)
pcaData_2 <- plotPCA(data_subset$subset_vsd, intgroup=c("condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pdf(file="Quality_plots/DESeq2/plotPCA.pdf")
pca_plot_rld <- ggplot(pcaData, aes(PC1, PC2, color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
geom_text(aes(label = name), color = "black", size=2, position = position_nudge(y = 0.8)) +
labs(title="PCA: rlog") +
coord_fixed()
pca_plot_vsd <- ggplot(pcaData_2, aes(PC1, PC2, color=condition)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
geom_text(aes(label = name), color = "black", size=2, position = position_nudge(y = 0.8)) +
labs(title="PCA: vsd") +
coord_fixed()
print(pca_plot_rld)
print(pca_plot_vsd)
dev.off()
#############BOX PLOTS################
pdf(file="Quality_plots/DESeq2/boxplot.pdf")
boxplot(assay(data_subset$subset_ntd), col="blue", las =2)
title(main="Boxplot: normalized counts")
boxplot(log10(assays(data_subset$subset_dds)[["cooks"]]), range=0, las=2)
title(main="Boxplot see outliers: cooks distance")
dev.off()
#############DISPERSION PLOTS################
pdf(file="Quality_plots/DESeq2/plotDispersions.pdf")
plotDispEsts(data_subset$subset_dds)
dev.off()
#############DESVIATION PLOT################
pdf(file="Quality_plots/DESeq2/plotSD.pdf")
meanSdPlot(assay(data_subset$subset_ntd))
dev.off()
##############HCLUST###################
assay_ntd <- assay(data_subset$subset_ntd)
pdf(file="Quality_plots/DESeq2/cluster_dendrogram.pdf")
plot(hclust(dist(t(assay_ntd)),method="average"))
dev.off()
##############PHEATMAP##############
select <- order(rowMeans(counts(data_subset$subset_dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(data_subset$subset_dds)[,c("condition")])
colnames(df) <- c("Condition")
rownames(df) <- colnames(data_subset$subset_ntd)
pdf(file="Quality_plots/DESeq2/heatmapCount_top20_highest_expression.pdf")
pheatmap(assay(data_subset$subset_ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=TRUE, annotation_col=df, main="Normalized counts top 20 more expressed genes")
dev.off()
######FULL PHEATMAP#################
pdf(file="Quality_plots/DESeq2/heatmapCount_all_genes.pdf")
pheatmap(assay(data_subset$subset_ntd), cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=TRUE,main="Normalized counts", annotation_col=df)
dev.off()
}
fishpond_plots <- function(swish_data, expr){
#############DISPERSION PLOTS################
pdf(file="Differential_expression/fishpond/maPlot_all.pdf")
plotMASwish(swish_data, alpha=.05)
dev.off()
#############VULCANO PLOTS################
res1 <- as_tidytable(mcols(swish_data))
data <- res1
Expression <- as.factor(ifelse(data$qvalue <= 0.05 & abs(data$log2FC) >= log2(2) , ifelse(data$log2FC >= log2(2) ,'Up qvalue < 0.05','Down qvalue < 0.05'), ifelse(data$pvalue <= 0.05 & abs(data$log2FC) >= log2(2) , ifelse(data$log2FC >= log2(2) ,'Up pvalue < 0.05','Down pvalue < 0.05'),'Not')))
pdf("Differential_expression/fishpond/vulcano_plot.pdf")
vulcano_plot <- ggplot(data,aes(x=log2FC,y=-log10(pvalue),colour=Expression)) +
xlab("log2FC")+ylab("-log10(pvalue)") +
geom_point(size = 2,alpha=1) +
ylim(0,7) + xlim(-5,5) +
scale_color_manual(values=c("blue", "green","grey", "red", "orange"))+
geom_vline(xintercept = c(-log2(2), log2(2)), lty = 2,colour="#000000")+
geom_hline(yintercept = c(-log10(0.05)), lty = 2,colour="#000000") +
ggtitle("Vulcano plot") +
theme(plot.title = element_text(hjust = -0.06,size = 20),
legend.text = element_text(size = 10),
legend.position = 'right',
legend.key.size=unit(0.4,'cm'))+
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"),axis.text=element_text(size=12,face = "bold"),axis.title.x=element_text(size=15),axis.title.y=element_text(size=15))
print(vulcano_plot)
dev.off()
#############DISPERSION PLOTS################
pdf(file="Differential_expression/fishpond/significant_hist.pdf")
hist(mcols(swish_data)$pvalue, col="grey", main = "pvalues test for differential expression")
hist(mcols(swish_data)$qvalue, col="grey", main = "qvalues test for differential expression")
dev.off()
##############HCLUST###################
pdf(file="Quality_plots/fishpond/cluster_dendrogram.pdf")
plot(hclust(dist(t(expr)),method="average"))
dev.off()
###########SAMPLE DISTANCE##############
sampleDists <- dist( t( expr ) )
sampleDistMatrix <- as.matrix( sampleDists )
colours = colorRampPalette(rev(brewer.pal(9, "Blues"))) (255)
pdf(file="Quality_plots/fishpond/heatmap_sample_to_sample.pdf")
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colours)
dev.off()
sig_genes <- subset(DE_data_frame, qvalue<=0.05 & (log2FC>=2 | log2FC<=-2))
gene_list <- sig_genes$Geneid
expression_subset <- as.data.frame(expr[which(rownames(expr) %in% gene_list),])
}
test_data <- function(samples_data, txi_data){
if (all(rownames(samples_data) %in% colnames(txi_data$counts)) == FALSE) {
print("Warning: Check sample names")
}
if (all(rownames(samples_data) == colnames(txi_data$counts)) == FALSE) {
print("Warning: Check sample names")
}
}
cat(blue("########################\nStarting with loading data\n###############################\n"))
####LOAD TRANSCRIPT RELATION DATA FILE #########################
tx2gene <- read.table(file.path(opt$rnaseq_dir, "star_salmon", "salmon_tx2gene.tsv"), header = F)
View(tx2gene)
colnames(tx2gene) <- c("TXNAME", "GENEID", "gene_name")
View(tx2gene)
if ( opt$differential_expression == "DEG") {
gene_genename <- tx2gene[,c(2:3)]
gene_genename <- gene_genename %>% distinct()
}
View(gene_genename)
####LOAD CLINICAL DATA FILE #########################
samples_clin_data <- load_sample_data(clinical_data = opt$sample_data, group = opt$group_col)
View(samples_clin_data)
View(samples_clin_data)
View(load_sample_data)
####LOAD ESPRESSION DATA #########################
files <- file.path(opt$rnaseq_dir,"star_salmon", samples_clin_data$names, "quant.sf")
names(files) <- samples_clin_data$names
coldata <- data.frame(files, samples_clin_data, stringsAsFactors=FALSE)
View(coldata)
if (!all(file.exists(coldata$files))) {
cat(red("############WARNING############\nNo todos los ficheros existen\n###############################\n"))
}
cat(blue("########################\nStarting with DESeq2\n###############################\n"))
if (opt$differential_expression == "DEG") {
txi <- tximport(files, type="salmon", tx2gene=tx2gene)
} else {
txi <- tximport(files, type="salmon", txOut = TRUE)
}
View(txi)
txi[["counts"]]
test_data(samples_data = samples_clin_data, txi_data = txi)
cat(blue("########################\nStarting with differential expression\n###############################\n"))
View(deseq2_analysis)
deseq2_results <- deseq2_analysis(txi_data = txi, samples = samples_clin_data, compare_char1 = opt$treatment, opt$control)
setwd("/data/bi/scratch_tmp/bi/SRVCNM786_20221205_GENOMEORTHORNAVIRAE02_mdfernandez_S/ANALYSIS/20221205_ANALYSIS02_METAGENOMIC_HUMAN")
library(plyr, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(tidyr, quietly = TRUE, warn.conflicts = FALSE)
library(stringr, quietly = TRUE, warn.conflicts = FALSE)
library(jsonlite, quietly = TRUE, warn.conflicts = FALSE)
library(writexl, quietly = TRUE, warn.conflicts = FALSE)
# PATHS
path <- getwd()
samples_ref <- read.table(paste0(path, "/samples_ref.txt"), header = F)
if (ncol(samples_ref) == 2) {
colnames(samples_ref) <- c("id", "ref")
} else {
colnames(samples_ref) <- c("id", "ref", "host")
}
fastq_names <- list.files("../../RAW/")
path_run <- Sys.readlink(paste0("../../RAW/", fastq_names[1]))
# columnas
columnas <- "run\tuser\thost\tVirussequence\tsample\ttotalreads\treadshostR1\treadshost\t%readshost\tNon-host-reads\t%Non-host-reads\tContigs\tLargest_contig\t%Genome_fraction"
name_columns <- as.vector(str_split(columnas, "\t", simplify = T))
list_assembly <- list(0)
i=3
# Run, user, host and sequence
name_run <- str_split(path_run, "/", simplify = T)[, 4]
name_user <- str_split(path, "_", simplify = T)[, 5]
name_host <- tolower(str_split(path, "_", simplify = T)[, 9])
date_service <- str_split(str_split(path, "_", simplify = T)[, 6], "/", simplify = T)[, 3]
name_sequence <- as.character(samples_ref$ref[i])
name_id <- as.character(samples_ref$id[i])
# path outputfolder
directorios <- list.dirs()
patron_workdir <- paste0(name_sequence, "_", date_service)
workdir <- directorios[grepl(patron_workdir, directorios)][1]
# totalreads
json_fastp <- fromJSON(paste0(workdir, "/fastp/", name_id, ".fastp.json"))
View(json_fastp)
value_totalreads <- json_fastp$summary[["after_filtering"]]$total_reads
# readshostR1
table_kraken <- read.table(paste0(workdir, "/kraken2/", name_id, ".kraken2.report.txt"), sep = "\t")
unclassified_reads <- as.numeric(subset(x = table_kraken, subset = V6 == "unclassified")[2])
value_readhostr1 <- sum(table_kraken$V3)-unclassified_reads
# readshosh
value_readhost <- value_readhostr1 * 2
# readshost
value_percreadhost <- round((value_readhost * 100) / value_totalreads, 2)
# non host reads
value_nonhostreads <- value_totalreads - value_readhost
# % non host
value_percnonhostreads <- round((value_nonhostreads * 100) / value_totalreads, 2)
# Contigs
quast_report_path <- paste("/",list.files(pattern = "transposed_report.tsv", recursive = TRUE, path = workdir), sep = "")
table_quast <- read.delim(paste0(workdir, quast_report_path), skip = 0, header = T, sep = "\t")
quast_report_path
# Contigs
assembly_workdir <- paste(workdir, "/assembly", sep = "")
quast_report_path <- paste("/",list.files(pattern = "transposed_report.tsv", recursive = TRUE, path = workdir), sep = "")
quast_report_path <- paste("/",list.files(pattern = "transposed_report.tsv", recursive = TRUE, path = assembly_workdir), sep = "")
quast_report_path
table_quast <- read.delim(paste0(workdir, quast_report_path), skip = 0, header = T, sep = "\t")
table_quast <- read.delim(paste0(assembly_workdir, quast_report_path), skip = 0, header = T, sep = "\t")
View(table_quast)
